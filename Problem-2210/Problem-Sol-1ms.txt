class Solution {
    public int countHillValley(int[] nums) {
        int count = 0;

        for (int i = 1; i < nums.length - 1; i++) {
            if (nums[i] == nums[i - 1]){
                 continue;
            } 
            int s = i - 1;
            while (s >= 0 && nums[s] == nums[i]){
                s--;

            } 
            int e = i + 1;
            while (e < nums.length && nums[e] == nums[i]){
                e++;
            } 

            if (s >= 0 && e < nums.length) {
                if (nums[i] > nums[s] && nums[i] > nums[e]) {
                    count++; 
                } 
                else if (nums[i] < nums[s] && nums[i] < nums[e]) {
                    count++; 
                }
            }
        }

        return count;
    }
}

We iterate through the array and for each index, we skip if it's equal to the previous one to avoid duplicate counting in plateaus.
Then we search for the closest non-equal neighbors on both left and right sides by moving pointers s and e.
If both neighbors exist, we check if the current value is strictly greater (hill) or strictly smaller (valley) than both.
If yes, we increase the count. This ensures that each distinct hill or valley is counted exactly once.