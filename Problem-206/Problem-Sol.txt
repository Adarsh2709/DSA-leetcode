/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseList(ListNode head) {
        if (head == null) {
            return head;
        }
        ListNode temp1 = null;
        ListNode temp2 = null;
        while (head != null) {
            temp2 = head.next;
            head.next = temp1;
            temp1 = head;
            head = temp2;
        }
        return temp1;
    }
}

This is a simple linked list problem where I need to reverse a given linked list.
My approach is iterative: I keep two temporary pointers to track the previous node (temp1) and the next node (temp2).
For each node, I reverse its pointer to point to the previous node, then move forward in the list using temp2.
I continue this until I reach the end of the list.
Finally, temp1 will be pointing to the new head of the reversed list, so I return it.