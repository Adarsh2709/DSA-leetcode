class Solution {
    public double myPow(double x, int n) {
        long N = n;
        if (N < 0) {
            x = 1 / x;
            N = -N;
        }

        double result = 1.0;
        while (N > 0) {
            if ((N % 2) == 1) {
                result *= x;
            }
            x *= x;
            N /= 2;
        }

        return result;
    }
} 
In this we just consider two cases if n is negative we just use first algorithm as if n = -n then we just make 2^(-3) as (1/2)^3
and then second is self explanatory and its a easy question to implement and we can also use Math.Pow()function to get direct answer(LOL).