/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        ListNode newnode = null;
        while(list1!=null && list2!=null){
            if(list1.val<=list2.val){
                newnode = lastinsert(newnode, list1.val);
                list1 = list1.next;
            }
            else{
                 newnode = lastinsert(newnode, list2.val);
                list2 = list2.next;
            }
        }
        while(list1!=null){
            newnode = lastinsert(newnode, list1.val);
            list1 = list1.next;
        }
        while(list2!=null){
            newnode = lastinsert(newnode, list2.val);
            list2 = list2.next;
        }
        return newnode;
    }
    private ListNode lastinsert(ListNode head, int val) {
    ListNode node = new ListNode(val);
    if (head == null) {
        return node;
    }
    ListNode temp = head;
    while (temp.next != null) {
        temp = temp.next;
    }
    temp.next = node;
    return head;
}

}

This is a linked list problem where I need to merge two sorted linked lists into a single sorted list.
My approach is simple: I keep comparing the current nodes of both lists and insert the smaller value into a new list using a helper function lastinsert.
If one list becomes empty, I directly add the remaining nodes of the other list.
In the end, I return the head of the newly created merged list.
The helper function lastinsert helps me insert a node at the end of the list each time, which makes the logic straightforward to implement and understand.